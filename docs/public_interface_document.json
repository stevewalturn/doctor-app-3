{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter application follows the Stacked architecture and provides features such as routing, dependency injection, and dialog/bottom sheet management. The main components include a Startup View, a Home View, and various supporting services and utilities. The app allows users to interact with a counter, view information alerts, and access custom bottom sheets.",
  "architecture_overview": "The application uses the Stacked architecture, which separates the concerns of the user interface, view models, and services. The app.dart file sets up the overall app structure, including routes, services, bottom sheets, and dialogs. The feature-specific folders (e.g., home, startup) contain the corresponding views and view models. The app also utilizes a centralized dependency injection system and a router for managing navigation.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI for the application. It defines the different types of bottom sheets available and associates them with their corresponding UI components.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  + setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  + NoticeSheet(request, completer)\n}\n\nBottomSheetService -> NoticeSheet : uses\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Initializes the bottom sheet service and sets up the custom sheet builders for each type of bottom sheet.",
          "parameters": [],
          "return_type": null
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the dependency injection and service locator for the application. It is generated by the `stacked` package and provides a centralized way to register and retrieve application-wide services.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is used to register the various services and dependencies that the application requires. It allows for the configuration of the environment and the registration of specific service implementations.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the dialog system in the Flutter application. It sets up the custom dialog builders and registers them with the DialogService from the stacked_services package.",
      "class_diagram": "@startuml\n' Classes\nclass DialogService {\n  registerCustomDialogBuilders()\n}\n\nclass InfoAlertDialog {\n  request\n  completer\n}\n\n' Interfaces\ninterface DialogBuilder {\n  (context, request, completer)\n}\n\n' Enums\nenum DialogType {\n  infoAlert\n}\n\n' Relationships\nDialogService *- DialogBuilder\nDialogBuilder <|-- InfoAlertDialog\nsetupDialogUi --> DialogService\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the custom dialog builders and registers them with the DialogService. It maps each DialogType to its corresponding DialogBuilder implementation.",
          "parameters": [
            "void"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the persistence and retrieval of todo items in the application. It provides an abstraction over the underlying storage mechanism, which in this case is the device's SharedPreferences. This class encapsulates the logic for loading, saving, updating, and deleting todo items, shielding the rest of the application from the implementation details.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  +Future<List<TodoModel>> loadTodos()\n  +Future<void> saveTodo(TodoModel todo)\n  +Future<void> updateTodo(TodoModel updatedTodo)\n  +Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todo items from the device's SharedPreferences storage.",
          "parameters": null,
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "saveTodo",
          "description": "Adds a new todo item to the list of existing todos and saves the updated list to the device's SharedPreferences storage.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list and saves the updated list to the device's SharedPreferences storage.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list and saves the updated list to the device's SharedPreferences storage.",
          "parameters": [
            "String"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:convert",
        "package:shared_preferences/shared_preferences.dart",
        "package:my_app/features/todo/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_input.dart",
      "description": "The `TodoInput` widget is responsible for providing an input field and a submit button for users to create new todo items. It manages the state of the input field and triggers a callback function when the user submits a new todo.",
      "class_diagram": "@startuml\nclass TodoInput {\n  -TextEditingController controller\n  -VoidCallback onSubmit\n  -bool isLoading\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `TodoInput` widget, which includes a `TextField` for the user to enter a new todo and an `IconButton` to submit the todo.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It provides a centralized way to define and handle the different views or screens of the app, ensuring a consistent and maintainable navigation structure.",
      "class_diagram": "@startuml\n  class Routes {\n    + static const homeView: String\n    + static const startupView: String\n    + static const all: Set<String>\n  }\n\n  class StackedRouter extends RouterBase {\n    + List<RouteDef> get routes\n    + Map<Type, StackedRouteFactory> get pagesMap\n  }\n\n  class NavigatorStateExtension on NavigationService {\n    + Future<dynamic> navigateToHomeView(...)\n    + Future<dynamic> navigateToStartupView(...)\n    + Future<dynamic> replaceWithHomeView(...)\n    + Future<dynamic> replaceWithStartupView(...)\n  }\n  @enduml",
      "methods": [
        {
          "name": "Routes.all",
          "description": "A set of all the available route names in the application.",
          "parameters": null,
          "return_type": "Set<String>"
        },
        {
          "name": "StackedRouter.routes",
          "description": "A list of all the route definitions for the application.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "StackedRouter.pagesMap",
          "description": "A map of page types to their corresponding route factories, used for generating the appropriate page navigation.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "NavigatorStateExtension.navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/views/home/home_view.dart",
        "my_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/todo/models/todo_model.dart",
      "description": "The TodoModel class represents a single to-do item in a to-do list application. It encapsulates the key data and functionality required to manage and persist todo items, including their unique identifier, title, completion status, and creation timestamp.",
      "class_diagram": "@startuml\nclass TodoModel {\n  +String id\n  +String title\n  +bool isCompleted\n  +DateTime createdAt\n  +TodoModel copyWith({String? id, String? title, bool? isCompleted, DateTime? createdAt})\n  +Map<String, dynamic> toJson()\n  +factory TodoModel.fromJson(Map<String, dynamic> json)\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with the specified changes, allowing you to update individual properties without recreating the entire object.",
          "parameters": [
            "String? id",
            "String? title",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "toJson",
          "description": "Converts the TodoModel instance to a JSON-serializable Map, which can be used to persist the todo item to a database or send it over the network.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a new TodoModel instance from a JSON-serializable Map, which can be used to deserialize todo items from a database or network response.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "TodoModel"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "This file defines the `TodoItem` widget, which is responsible for rendering a single todo item in a list of todos. It handles the visual representation of a todo, including its title, completion status, and creation timestamp. It also provides functionality for toggling the completion status and deleting the todo item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +TodoModel todo\n  +Function(String) onToggle\n  +Function(String) onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoItem widget, including the checkbox, title, and creation timestamp. It also provides the ability to dismiss the todo item by swiping it to the right.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:intl/intl.dart",
        "package:my_app/features/todo/models/todo_model.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file is responsible for managing the localization and internationalization (i18n) functionality of the application. It serves as a central hub for accessing and using the app's localized strings and supported locales.",
      "class_diagram": "",
      "methods": [
        {
          "name": "AppLocalizations",
          "description": "Exports the AppLocalizations class, which provides access to the app's localized strings.",
          "parameters": null,
          "return_type": "AppLocalizations"
        },
        {
          "name": "LocalizationsExtension",
          "description": "Exports the LocalizationsExtension, which provides extension methods to easily access localized strings.",
          "parameters": null,
          "return_type": "LocalizationsExtension"
        },
        {
          "name": "SupportedLocales",
          "description": "Exports the SupportedLocales, which provides a list of the locales supported by the app.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file provides an extension on the `BuildContext` class that makes it easier to access the current `AppLocalizations` instance, which is responsible for managing the localization and internationalization of the application's user interface.",
      "class_diagram": "@startuml\nclass BuildContext {\n  +AppLocalizations localizations\n}\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance, which can be used to access localized strings and other internationalization-related functionality.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is responsible for managing the state and business logic of the Todo feature in the application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architectural pattern, providing the necessary functionality to create, update, and delete todo items, as well as handle any errors that may occur during these operations.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  - TodoService _todoService\n  - String? _errorMessage\n\n  + List<TodoModel> get todos\n  + String? get errorMessage\n\n  + Future<void> initialize()\n  + Future<void> addTodo(String title)\n  + Future<void> toggleTodo(String id)\n  + Future<void> deleteTodo(String id)\n  + void sortTodosByDate()\n  + void clearError()\n}\n\nTodoViewModel o-- TodoService\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the TodoViewModel by loading the existing todo items from the TodoService. It sets the busy state during the operation and handles any errors that may occur.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item with the specified title to the TodoService. It validates the title and sets the busy state during the operation, handling any errors that may occur.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of a todo item with the specified ID in the TodoService. It sets the busy state during the operation and handles any errors that may occur.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a todo item with the specified ID from the TodoService. It sets the busy state during the operation and handles any errors that may occur.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "sortTodosByDate",
          "description": "Sorts the todo items in the TodoService by their date in ascending order.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "clearError",
          "description": "Clears the error message stored in the TodoViewModel and notifies the listeners of the change.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/app/services/todo_service.dart",
        "package:my_app/features/todo/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides the core functionality for handling internationalization and localization of the app's user interface.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns the list of localization delegates that provide the app's string translations and formatting rules for the supported locales.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns the list of locales that the app supports for internationalization and localization.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options used in the development environment of the application. It is a part of the overall Firebase integration within the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "FirebaseOptions",
          "description": "The constructor for the FirebaseOptions class, which encapsulates the necessary configuration parameters for the Firebase SDK.",
          "parameters": [
            "apiKey",
            "appId",
            "messagingSenderId",
            "projectId",
            "storageBucket"
          ],
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "flutter"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This Dart file is the main entry point for the production environment of the application. It is responsible for bootstrapping the application and setting up the initial state and configuration for the production deployment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function that is executed when the application is launched. It calls the bootstrap function to initialize the application with the appropriate configuration for the production environment.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an enum called `Flavor` that represents the different flavors or environments of the application, such as `production` and `development`. This enum is used to configure and control the behavior of the application based on the current environment.",
      "class_diagram": "@startuml\n  enum Flavor {\n    production\n    development\n  }\n  @enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, initializing key dependencies, and running the app's main widget. It ensures a consistent and reliable application launch process, handling any exceptions that may occur during startup.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point of the application, which sets up the necessary environment, initializes dependencies, and runs the app's main widget.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for an analytics implementation that encapsulates the details of the underlying analytics solution. It provides a consistent interface for interacting with analytics functionality across the application.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n\nclass InitializableDependency {\n  + init(): Future<void>\n}\n\nAnalyticService -up-|> InitializableDependency\n@endumul",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService instance, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is a ViewModel for the notice bottom sheet UI component in the application. The primary purpose of this class is to manage the state and behavior of the notice bottom sheet, providing a centralized location for the business logic related to displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is responsible for tracking user navigation in a Flutter application and sending screen view events to an analytics service. It acts as a NavigatorObserver to intercept navigation events and record the screens the user visits.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route route, Route? previousRoute)\n  + void didReplace(newRoute: Route, oldRoute: Route)\n  + void didPop(Route route, Route? previousRoute)\n  - void _trackScreenView(Route route)\n}\n\nclass AnalyticService {\n  + void trackScreen(String screenName)\n}\n\nScreenObserver --> AnalyticService : Uses\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigator stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a new route replaces an existing one in the navigator stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigator stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Extracts the screen name from the route settings and sends it to the AnalyticService for tracking.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and constants that help with the layout and styling of the user interface (UI) in a Flutter application. It serves as a centralized location for common UI-related functionality, promoting code reuse and consistency across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that represents a small horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This file contains the `InfoAlertDialogModel` class, which is responsible for providing the view model for an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "The `TodoView` class is responsible for rendering the user interface (UI) for a todo list application. It provides a visual representation of the user's todo items, allows them to create new todos, and interact with existing ones.",
      "class_diagram": "@startuml\nclass TodoView {\n  -Scaffold build(BuildContext context, TodoViewModel model, Widget? child)\n  +TodoViewModel viewModelBuilder(BuildContext context)\n  +void onViewModelReady(TodoViewModel model)\n}\n\nclass TodoViewModel {\n  +List<Todo> todos\n  +bool isBusy\n  +String? errorMessage\n  +void sortTodosByDate()\n  +void toggleTodo(Todo todo)\n  +void deleteTodo(Todo todo)\n  +void addTodo(String text)\n  +void clearError()\n  +void initialize()\n}\n\nclass TodoItem {\n  +final Todo todo\n  +final void Function(Todo) onToggle\n  +final void Function(Todo) onDelete\n  +Widget build(BuildContext context)\n}\n\nclass TodoInput {\n  +final TextEditingController controller\n  +final VoidCallback onSubmit\n  +final bool isLoading\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoView, including the app bar, todo list, and input field.",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the TodoViewModel, which contains the business logic for the todo list.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the TodoViewModel when the TodoView is ready.",
          "parameters": [
            "TodoViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/features/todo/widgets/todo_input.dart",
        "package:my_app/features/todo/widgets/todo_item.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the production environment of the application. It defines the necessary credentials and settings required to connect and interact with the Firebase services used in the application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the app's main view. It serves as the view model for the app's root-level screen, providing the necessary data and functionality to the corresponding UI components.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +initialize()\n  +fetchData()\n  +processData()\n  +updateUI()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the AppViewModel by setting up any necessary dependencies, loading initial data, and preparing the view model for use.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "fetchData",
          "description": "Retrieves data from various sources (e.g., API calls, local storage) that is required by the app's main view.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "processData",
          "description": "Transforms and consolidates the fetched data into a format that can be easily consumed by the UI components.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "updateUI",
          "description": "Updates the UI based on the processed data, ensuring that the app's main view reflects the current state of the application.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the application's user interface. It is responsible for setting up the overall application structure, including the navigation, localization, and other essential components.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n_App o-- AppViewModel\n_App o-- StackedRouter\n_App o-- StackedService\n_App o-- ScreenObserver\n_App o-- localizationsDelegates\n_App o-- supportedLocales\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the `MaterialApp` and various other components.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/app/app.router.dart",
        "my_app/l10n/supported_locales.dart",
        "my_app/observer/screen_observer.dart",
        "my_app/ui/views/app/app_viewmodel.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class in this file is responsible for rendering the main user interface (UI) of the home screen in the application. It serves as the primary entry point for the user to interact with the core functionality of the app.",
      "class_diagram": "@startuml\nclass HomeView {\n  + builder(BuildContext, HomeViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n  + counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including a title, a button to increment a counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the `HomeViewModel`, which provides the business logic and state management for the home screen.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the implementation of the `InfoAlertDialog` class, which is responsible for displaying an informative alert dialog in the application. The dialog is used to provide users with important information, such as updates, announcements, or instructions.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog({required DialogRequest request, required Function(DialogResponse) completer})\n  +Widget builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child)\n  +InfoAlertDialogModel viewModelBuilder(BuildContext context)\n}\n\nclass InfoAlertDialogModel {\n}\n\nDialogRequest <-- InfoAlertDialog\nDialogResponse <-- InfoAlertDialog\nStackedView <-- InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialog",
          "description": "The constructor for the `InfoAlertDialog` class, which takes two required parameters: the `DialogRequest` that contains the title and description of the alert, and a `completer` function that is called when the user dismisses the dialog.",
          "parameters": [
            "DialogRequest request",
            "Function(DialogResponse) completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `InfoAlertDialog`. It takes the `BuildContext`, the `InfoAlertDialogModel`, and an optional `Widget` as parameters, and returns the `Widget` that represents the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel`, which is used by the `StackedView` to manage the state of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for todos in the application. It acts as an intermediary between the UI and the TodoRepository, which handles the data storage and retrieval. The main purpose of this class is to provide a consistent and reliable way for the application to interact with the todo data, encapsulating the business logic and data access.",
      "class_diagram": "@startuml\nclass TodoService {\n  - TodoRepository _repository\n  - List<TodoModel> _todos\n\n  + List<TodoModel> get todos\n  + Future<void> initialize()\n  + Future<void> addTodo(String title)\n  + Future<void> toggleTodo(String id)\n  + Future<void> deleteTodo(String id)\n  + void sortTodosByDate()\n}\n\nTodoService o-- TodoRepository\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Loads all the existing todos from the TodoRepository and updates the local _todos list.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new TodoModel instance with the provided title, saves it to the TodoRepository, and adds it to the local _todos list.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of the todo with the specified id, updates the TodoRepository, and updates the local _todos list accordingly.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes the todo with the specified id from the TodoRepository and the local _todos list.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "sortTodosByDate",
          "description": "Sorts the local _todos list in descending order based on the todo's creation date and notifies listeners of the change.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/features/todo/models/todo_model.dart",
        "package:my_app/features/todo/todo_repository.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is part of the overall application architecture and ensures a smooth transition into the main user interface.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  - _navigationService: NavigationService\n  + runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes the startup logic, which includes a 3-second delay and then navigates the user to the home view of the application.",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The `HomeViewModel` class is responsible for managing the state and functionality of the home screen in a Flutter application. It provides the necessary logic and data to power the user interface, allowing users to interact with the application's core features.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  -_dialogService: DialogService\n  -_bottomSheetService: BottomSheetService\n  +counterLabel: String\n  -_counter: int\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter and rebuilds the UI to reflect the updated value.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a message and a title.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and a description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "app/app.bottomsheets.dart",
        "app/app.dialogs.dart",
        "app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and configurations used across the application. It serves as a centralized location for managing various application-wide settings and parameters.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time values in the application, particularly for handling data from Cloud Firestore.",
      "class_diagram": "@startuml\n\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (such as a Firestore Timestamp or a String) into a DateTime object, handling different input formats.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines a custom exception class called `APIException` that is used to handle and communicate API-related errors and exceptions within the application.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +String toString()\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class, which allows for the creation of a new instance of the exception with an optional message.",
          "parameters": [
            "dynamic message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString()` method, which provides a string representation of the `APIException` instance, including the exception type and the associated message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file defines a custom extension on the `Color` class in Flutter, providing utility functions to easily create `Color` objects from hexadecimal color strings.",
      "class_diagram": "@startuml\nclass Color {\n  +static fromHex(String hexColorString): Color\n  +static intFromHex(String hexColorString): int\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string to an integer color value.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class provides a set of utility functions for working with JSON data in a Dart/Flutter application. It is responsible for safely and efficiently converting JSON data to and from Dart data structures.",
      "class_diagram": "@startuml\n  class JsonUtil {\n    + static formatMap(Map<dynamic, dynamic>) : Map<String, dynamic>\n    + static fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>)) : T?\n    + static formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>)) : List<T>\n  }\n  @enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic>, removing any keys that are null.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, using the provided fromJson function. Returns null if the input is null or not a Map.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T>, where each item is the result of applying the provided fromJson function to the formatted map representation of the corresponding JSON object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines the Flavors class, which is responsible for managing and providing information about the current application flavor (e.g., development, production).",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "isDev",
          "description": "Returns true if the current application flavor is development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Returns true if the current application flavor is production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This file is responsible for bootstrapping the development version of the application. It sets up the initial entry point and configuration for the app, ensuring that it runs in the development environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function that serves as the application's entry point. It calls the bootstrap function, passing in the AppView as the builder and the Flavor.development as the environment.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class in this file provides a set of utility methods for handling common contact-related functionality in a mobile application. It abstracts away the platform-specific implementation details, allowing the app to easily launch WhatsApp conversations or email clients from within the app.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the native WhatsApp application (or the web version if the native app is not available) to initiate a conversation with the provided phone number, optionally with a pre-filled message.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the native email client with the provided email address pre-filled in the recipient field.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "Auto-generated entry for lib/ui/common/app_colors.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for rendering a bottom sheet UI component that displays a notice or alert message to the user. It is part of the application's UI layer and is used to provide important information or updates to the user.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required this.completer, required this.request})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n  -completer: Function(SheetResponse)?\n  -request: SheetRequest\n}\n\nclass NoticeSheetModel extends BaseViewModel {\n}\n\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class, which takes two required parameters: `completer` and `request`. The `completer` parameter is a function that is called when the bottom sheet is dismissed, and the `request` parameter contains the title and description of the notice to be displayed.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `NoticeSheet` widget. It takes the `BuildContext`, the `NoticeSheetModel` instance, and an optional `Widget` child as parameters, and returns a `Widget` that displays the notice message.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel` class, which is used to manage the state and behavior of the `NoticeSheet` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The StartupView class is responsible for displaying the initial startup screen of the application. It provides a simple loading screen with the app's title and a loading indicator, while waiting for the startup logic to complete.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): StartupViewModel\n  +onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  +runStartupLogic(): void\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app title and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the StartupViewModel to the view.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Executes the startup logic when the view model is ready.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/scheduler.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/startup/startup_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each feature-specific view (e.g., HomeView) has a corresponding view model (e.g., HomeViewModel) that handles the business logic and state. The view models are responsible for updating the UI, managing data, and interacting with services. The app.locator.dart file sets up the dependency injection for the view models and other services, ensuring they are accessible across the application.",
  "navigation_flow": "The navigation flow of the application is managed using the Stacked Router, which is defined in the app.router.dart file. When the app is launched, the main.dart file sets up the AppView, which initializes the Stacked architecture and displays the StartupView. After the startup logic is complete, the StartupViewModel navigates to the HomeView. The user can then interact with the HomeView, triggering actions that are handled by the HomeViewModel, which may in turn display dialogs or bottom sheets using the corresponding services."
}