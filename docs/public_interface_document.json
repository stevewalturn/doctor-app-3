{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter project is a todo list application that follows the Stacked architecture. It features routing, dependency injection, and management of dialogs and bottom sheets. The application allows users to create, update, and delete todo items, as well as mark them as completed. It also includes analytics tracking and support for multiple languages.",
  "architecture_overview": "The application is built using the Stacked architecture, which promotes separation of concerns and testability. It consists of several key components:\n\n- App Setup: The `app.dart` file defines the overall app structure, including routes, dependencies, bottom sheets, and dialogs. It uses Stacked annotations to simplify the setup process.\n- Features: The `home` and `startup` features each have a view and a corresponding view model, which handle the UI and business logic, respectively.\n- UI Components: Reusable UI elements, such as the `TodoItem` and `AddTodoSheet`, are defined in the `widgets` folder.\n- Utilities: Helper classes and extension methods are provided for tasks like date/time formatting, JSON handling, and contact interactions.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This file contains the Firebase configuration options for the development environment. It is responsible for providing the necessary credentials and settings to connect the Flutter application with the Firebase backend services during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "firebase_options.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to enable the app to securely connect to and utilize Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialog system used throughout the application. It defines a set of dialog types that can be displayed to the user, and provides a centralized registration mechanism for the dialog builders that construct the UI for each dialog type.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the custom dialog builders with the DialogService, which is then used to display the dialogs throughout the application.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for providing a UI component that allows users to create new todo items. It is a reusable widget that can be displayed as a bottom sheet, providing a simple and intuitive way for users to add new tasks to their todo list.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  - Function(SheetResponse<String>) completer\n  - SheetRequest request\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for the add todo sheet, including a text input field, cancel and add buttons, and handles the submission of the new todo item.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI for the application. It defines the different types of bottom sheets available and provides a centralized mechanism to register custom bottom sheet builders.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\ninterface SheetBuilder {\n  (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  +NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nSheetBuilder --> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the different bottom sheet types. It registers the NoticeSheet builder for the BottomSheetType.notice type.",
          "parameters": [
            "void"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This Dart file serves as the entry point for managing the internationalization (i18n) and localization (l10n) functionality of the application. It provides a centralized location to export the necessary components and utilities for handling localized content and supported languages.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "The TodoItem widget is responsible for rendering a single task item in a todo list. It displays the task title, creation date, and completion status, and provides functionality to toggle the task's completion and delete the task.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +Todo todo\n  +Function(String) onToggle\n  +Function(String) onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for a single todo item, including the checkbox, title, creation date, and delete button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo.dart",
        "package:intl/intl.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file provides an extension on the `BuildContext` class that makes it easier to access the current `AppLocalizations` instance, which is responsible for handling the localization of the application's user interface.",
      "class_diagram": "@startuml\nclass BuildContext {\n    +AppLocalizations localizations\n}\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance for the given `BuildContext`.",
          "parameters": [],
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a central location to define and access the application's supported languages, which is a critical aspect of internationalization and localization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "get localizationsDelegates",
          "description": "This getter returns the list of localization delegates used by the application. These delegates are responsible for loading the appropriate locale-specific resources and translations.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "get supportedLocales",
          "description": "This getter returns the list of locales supported by the application. This information is used by the Flutter framework to determine which translations to load and display.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for initializing and bootstrapping the development version of the application. It sets up the necessary components and configurations to run the app in the development environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entrypoint of the application. This function is called when the app is launched. It initializes the app by calling the `bootstrap` function, which sets up the app view and the development flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an enumeration called `Flavor` that represents the different flavors or build configurations of the application. It provides a simple way to differentiate between the production and development environments.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This Dart file is responsible for bootstrapping the production version of the application. It serves as the entry point for the production build of the app, setting up the necessary configurations and initializing the main application view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function, passing in the `AppView` as the builder and the `Flavor.production` as the flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality, encapsulating the implementation details and providing a consistent interface for interacting with analytics tools and services.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, performing any necessary setup or configuration.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This file defines the `Todo` class, which represents a single todo item in a todo list application. The `Todo` class encapsulates the key attributes of a todo item, including its unique identifier, title, completion status, and creation timestamp. It provides a set of utility methods to create, update, and serialize/deserialize todo items, enabling the storage and retrieval of todo data.",
      "class_diagram": "@startuml\nclass Todo {\n  -String id\n  -String title\n  -bool isCompleted\n  -DateTime createdAt\n  +Todo({id, title, isCompleted, createdAt})\n  +copyWith({id, title, isCompleted, createdAt})\n  +toJson()\n  +fromJson(json)\n  +get props\n}\n@enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "Constructor that creates a new `Todo` instance with the provided attributes.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the provided updated attributes, leaving the unchanged attributes intact.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "Converts the `Todo` instance to a JSON-serializable map, which can be used for storage or transport.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a `Todo` instance from a JSON map, which can be used for deserializing stored or received todo data.",
          "parameters": [
            "json"
          ],
          "return_type": "Todo"
        },
        {
          "name": "props",
          "description": "Returns a list of the object's properties, which is used for comparing `Todo` instances for equality.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application and reporting them to the AnalyticService. It acts as a NavigatorObserver, intercepting navigation events and capturing the screen names as the user navigates through the app.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + void didPush(Route, Route)\n  + void didReplace(newRoute: Route, oldRoute: Route)\n  + void didPop(Route, Route)\n  - void _trackScreenView(Route)\n}\n\nAnalyticService -[hidden]-> ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a new route replaces an existing one on the navigation stack.",
          "parameters": [
            "newRoute: Route<dynamic>",
            "oldRoute: Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped off the navigation stack.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Extracts the screen name from the route settings and sends it to the AnalyticService for tracking.",
          "parameters": [
            "Route<dynamic>"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the application's initialization process. It sets up the necessary dependencies, configurations, and environment-specific settings to ensure a smooth application launch.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point that initializes the application. It sets up the app's locator, dialog UI, bottom sheet UI, and runs the app with the provided builder function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and functionality related to the todo list in the application. It acts as an intermediary between the user interface and the underlying data repository, handling the loading, creation, updating, and deletion of todos.",
      "class_diagram": "@startuml\nclass TodoService {\n  - TodoRepository _repository\n  - ReactiveValue<List<Todo>> _todos\n  + List<Todo> get todos\n  + void loadTodos()\n  + void addTodo(String title)\n  + void toggleTodoCompletion(String id)\n  + void deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todos from the TodoRepository and updates the local state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item, adds it to the repository, and updates the local state.",
          "parameters": [
            "String title"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item in the repository and updates the local state.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the repository and updates the local state.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/features/home/todo_repository.dart",
        "package:my_app/models/todo.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for providing the underlying view model for a notice bottom sheet UI component. It extends the BaseViewModel class from the stacked package, which provides a foundation for MVVM (Model-View-ViewModel) architectural pattern.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +void initialize()\n}\n\nNoticeSheetModel -up-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "This method is likely called to initialize the view model and prepare it for use in the UI component. It may perform tasks such as fetching data, setting up event listeners, or initializing internal state.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "The `InfoAlertDialogModel` class is responsible for managing the state and behavior of an information alert dialog in a Flutter application. It extends the `BaseViewModel` class from the `stacked` package, which provides a basic implementation of the Model-View-ViewModel (MVVM) architectural pattern.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the dependency injection and service locator for the application. It is used to register various services and make them available across the entire application, promoting maintainability and testability.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is the primary entry point for setting up the application's service locator. It allows you to register dependencies, such as services, and optionally specify an environment and environment filter.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file defines the routing structure for the Flutter application, including the available views and the logic to navigate between them. It is responsible for managing the application's navigation flow and ensuring a consistent user experience.",
      "class_diagram": "@startuml\n  class Routes {\n    +String homeView\n    +String startupView\n    +Set<String> all\n  }\n\n  class StackedRouter {\n    +List<RouteDef> get routes()\n    +Map<Type, StackedRouteFactory> get pagesMap()\n  }\n\n  class NavigatorStateExtension {\n    +Future navigateToHomeView()\n    +Future navigateToStartupView()\n    +Future replaceWithHomeView()\n    +Future replaceWithStartupView()\n  }\n\n  Routes --> StackedRouter\n  StackedRouter --> HomeView\n  StackedRouter --> StartupView\n  NavigatorStateExtension --> Routes\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/views/home/home_view.dart",
        "my_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/theme/app_theme.dart",
      "description": "This Dart file defines the application's light theme, which includes the visual styling and appearance for various UI components such as the app bar, floating action button, input fields, cards, and checkboxes. It provides a centralized place to manage and customize the app's overall visual theme, ensuring a consistent look and feel across the application.",
      "class_diagram": "@startuml\nclass AppTheme {\n  +static ThemeData get lightTheme()\n}\n@enduml",
      "methods": [
        {
          "name": "lightTheme",
          "description": "Returns the application's light theme configuration as a ThemeData object. This includes settings for the primary color, scaffold background color, app bar, floating action button, input fields, cards, checkboxes, and dividers.",
          "parameters": null,
          "return_type": "ThemeData"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of utility functions and constants that assist with the layout and styling of UI elements in a Flutter application. It helps create a consistent and responsive user interface across the app.",
      "class_diagram": "@startuml\nclass UiHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a SizedBox with the specified height to provide vertical spacing.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "A function that returns a fraction of the screen height, based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width and the provided font size and max value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is the main view model for the application's core functionality. It serves as the central hub for managing the application's state and driving the user interface.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "The `AppViewModel` class does not define any public methods. It inherits from `BaseViewModel` and is intended to be extended by other view models that handle specific application features and screens.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up and managing the app's overall structure, navigation, and internationalization.",
      "class_diagram": "@startuml\nclass AppView {\n  +Widget build(BuildContext context)\n}\n\nclass _App {\n  +Widget build(BuildContext context, AppViewModel viewModel)\n}\n\nAppView *--> _App\n_App o--> MaterialApp\n_App o--> AppViewModel\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the app's main UI, including the `MaterialApp` widget, which sets up the app's navigation, internationalization, and other core functionality.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the state of a user's todo items. It provides a centralized interface for creating, reading, updating, and deleting todo items, as well as marking them as complete or incomplete.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  - List<Todo> _todos\n  + List<Todo> getTodos()\n  + void addTodo(Todo todo)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves a copy of the current list of todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item in the list.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main user interface of the application's home screen. It provides a simple UI with a greeting message, a button to increment a counter, and buttons to display a dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView extends StackedView<HomeViewModel> {\n  +builder(BuildContext context, HomeViewModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including the greeting message, counter button, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext context",
            "HomeViewModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for displaying a counter value and handling user interactions, such as incrementing the counter and showing dialog/bottom sheet UI elements.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  +String get counterLabel\n  +void incrementCounter()\n  +void showDialog()\n  +void showBottomSheet()\n}\n\nHomeViewModel o-- DialogService\nHomeViewModel o-- BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "get counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the updated state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description using the DialogService.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description using the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is part of the MVVM (Model-View-ViewModel) architecture and is used to separate the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass StartupViewModel extends BaseViewModel {\n  - _navigationService : NavigationService\n  + runStartupLogic() : Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for executing the startup logic of the application. It delays for 3 seconds and then navigates the user to the home view of the application.",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for displaying the initial startup screen of the application. It is the entry point for the application and is responsible for handling the initial startup logic.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `StartupView`. It displays a centered column with the app name and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `StartupViewModel`, which is used to manage the business logic of the startup process.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "The `onViewModelReady` method is called when the `StartupViewModel` is ready. It triggers the `runStartupLogic` method on the `StartupViewModel` to start the application's startup process.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/scheduler.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/startup/startup_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time data, particularly for handling different data representations such as Timestamp objects from Firestore and ISO-8601 formatted strings.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (Timestamp, String, or DateTime) to a DateTime object.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines an exception class called `APIException` that serves as a parent class for exceptions that can be thrown from the API service layer of the application.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +APIException(message)\n  +toString() : String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructs an `APIException` instance with an optional message parameter.",
          "parameters": [
            "dynamic message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Returns a string representation of the `APIException` instance, including the runtime type and the message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the `Color` class, allowing for easy conversion of hexadecimal color strings to `Color` objects. It also includes a utility method to convert a hexadecimal color string to an integer representation.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string to an integer representation.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class provides utility functions for working with JSON data in the application. It offers a set of static methods to handle common JSON-related tasks, such as formatting maps, converting JSON to Dart objects, and formatting lists of JSON maps.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  + static Map<String, dynamic> formatMap(Map<dynamic, dynamic> json)\n  + static T? fromJsonOrNull<T>(dynamic json, T Function(Map<String, dynamic>) fromJson)\n  + static List<T> formatListMap<T>(List<dynamic> json, T Function(Map<String, dynamic>) fromJson)\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic>, removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts the provided JSON data to an instance of the specified Dart class, or returns null if the JSON is null or not a Map.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON maps to a List<T>, where each element is an instance of the specified Dart class.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a Flavors class that is responsible for managing the current app flavor (development or production) and exposing utility methods to check the active flavor.",
      "class_diagram": "@startuml\nclass Flavors {\n  +factory Flavors()\n  +static Flavor? flavor\n  +static bool get isDev()\n  +static bool get isProd()\n}\n\nenum Flavor {\n  development\n  production\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class. This ensures a singleton instance is used.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "factory Flavors",
          "description": "Factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "flavor",
          "description": "Static property that stores the current app flavor.",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "isDev",
          "description": "Static getter that returns true if the current app flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Static getter that returns true if the current app flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This Dart file defines a set of constants that are used throughout the application. It serves as a centralized location for storing and managing various configuration values, file paths, and default settings. The primary purpose of this file is to provide a consistent and easily accessible way to access these constants, ensuring that changes can be made in a single location without affecting the rest of the codebase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines the `NoticeSheet` class, which is responsible for displaying a bottom sheet with a notice message. It provides a reusable UI component for displaying important information to the user in a modal view.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request, super.key})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nnote left of NoticeSheet\n  Displays a bottom sheet with a notice message\n  - Title and description are provided via the SheetRequest\n  - Renders a UI with the title, description, and closes the bottom sheet when tapped\nend note\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the bottom sheet, displaying the notice title and description.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `NoticeSheetModel` to provide data and logic to the view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp conversations and email clients from the Flutter app. It abstracts the underlying platform-specific logic to provide a consistent interface for initiating contact with users.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches a WhatsApp conversation with the specified phone number and optional message text.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the device's default email client with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines an InfoAlertDialog widget, which is responsible for displaying a basic information dialog to the user. The dialog includes a title, description, and a dismissal button. This dialog is commonly used to provide users with important information or updates in a clear and concise manner.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  + InfoAlertDialog({required this.request, required this.completer})\n  + builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child)\n}\n\nclass InfoAlertDialogModel {\n}\n\nclass DialogRequest {\n  + title: String\n  + description: String\n}\n\nclass DialogResponse {\n  + confirmed: bool\n}\n\nInfoAlertDialog --> InfoAlertDialogModel\nInfoAlertDialog --> DialogRequest\nInfoAlertDialog --> DialogResponse\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the InfoAlertDialog, which includes the title, description, and a dismissal button. The dialog is displayed as a centered, rounded-corner modal window.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing the application's color palette, making it easier to maintain visual consistency and apply changes across the codebase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each feature (e.g., `HomeView` and `StartupView`) has a corresponding view model (e.g., `HomeViewModel` and `StartupViewModel`) that handles the business logic and state. The view models use reactive programming principles from the Stacked package to manage the state and update the UI accordingly.\n\nThe `TodoService` class acts as the central repository for managing the todo items, providing methods to load, create, update, and delete todos. It exposes a `todos` reactive value that the `HomeViewModel` can listen to and use to update the UI.\n\nThe `AnalyticService` is responsible for tracking screen views and other app events, which are observed by the `ScreenObserver` class and reported to the analytics service.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the `app.router.dart` file. The router defines the available routes (HomeView and StartupView) and provides extension methods on the `NavigatorState` to navigate between them.\n\nWhen the app is launched, the `main.dart` file sets up the app and runs the `AppView`, which initializes the Stacked architecture and shows the `StartupView`. After completing the startup logic, the `StartupViewModel` navigates to the `HomeView`.\n\nUser interactions within the `HomeView`, such as opening a dialog or bottom sheet, are handled by the `HomeViewModel`, which uses the `DialogService` and `BottomSheetService` provided by the Stacked package to display the respective UI elements."
}